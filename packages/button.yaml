# Configuration des boutons logiques
# Ces boutons permettent de déclencher des actions spécifiques sur le capteur EC.
button:
  # Lecture des données du capteur EC
  - platform: template  # Bouton basé sur une action personnalisée.
    name: "EC - Lire"  # Nom affiché dans l'interface utilisateur.
    icon: mdi:read  # Icône affichée dans Home Assistant.
    id: read_ec  # Identifiant unique pour ce bouton.
    entity_category: "Config"  # Catégorie d'entité (configuration).
    on_press:
      then:
        - lambda: |-
            byte error;
            Wire.beginTransmission(${addEC});  // Initialise la communication avec l'adresse I2C.
            error = Wire.endTransmission();
            if (error == 0) {
              id(ec_ezo).send_custom("R");  // Envoie la commande "R" pour lire les données.
            } else {
              ESP_LOGW("custom_conductivity_read", "Pas de capteur EC à cette adresse: ${addEC}!");
            }
  # Envoi de la commande sélectionnée au capteur EC
  - platform: template  # Bouton basé sur une action personnalisée.
    name: "EC - Commande sélectionnée envoyée"  # Nom affiché dans l'interface utilisateur.
    id: send_selected_ec  # Identifiant unique pour ce bouton.
    entity_category: "Config"  # Catégorie d'entité (configuration).
    on_press:
      then:
        - lambda: |-
            if (id(select_command_ec).state == "Lire") {
              id(ec_ezo).send_custom("R");
            }
            if (id(select_command_ec).state == "Information") {
              id(ec_ezo).get_device_information();
            }
            if (id(select_command_ec).state == "Status") {
              id(ec_ezo).send_custom("Status");
            }
            if (id(select_command_ec).state == "Obtenir valeur K sonde") {
              id(ec_ezo).send_custom("K,?");
            }  
            if (id(select_command_ec).state == "Obtenir Valeur TDS") {
              id(ec_ezo).send_custom("TDS,?");
            }
            if (id(select_command_ec).state == "Convert. TDS en NaCl - 0.48") {
              id(ec_ezo).send_custom("TDS,0.48");
            }
            if (id(select_command_ec).state == "Obt. Paramètres") {
              id(ec_ezo).send_custom("O,?");
            }  
            if (id(select_command_ec).state == "Definir Sonde K1") {
              id(ec_ezo).send_custom("K,1");
            }
            if (id(select_command_ec).state == "Sortie Valeurs - Toutes (Par déf.)") {
              id(ec_ezo).send_custom("O,EC,1");
              id(ec_ezo).send_custom("O,TDS,1");
              id(ec_ezo).send_custom("O,S,1");
              id(ec_ezo).send_custom("O,SG,1");
            }
            if (id(select_command_ec).state == "Sortie Valeurs - Conductivité") {
              id(ec_ezo).send_custom("O,EC,1");
              id(ec_ezo).send_custom("O,TDS,0");
              id(ec_ezo).send_custom("O,S,0");
              id(ec_ezo).send_custom("O,SG,0");
            }
            if (id(select_command_ec).state == "Salinité") {
              id(ec_ezo).send_custom("O,EC,0");
              id(ec_ezo).send_custom("O,TDS,0");
              id(ec_ezo).send_custom("O,S,1");
              id(ec_ezo).send_custom("O,SG,0");
            }
            if (id(select_command_ec).state == "Sortie Valeurs - Densité Spé") {
              id(ec_ezo).send_custom("O,EC,0");
              id(ec_ezo).send_custom("O,TDS,0");
              id(ec_ezo).send_custom("O,S,0");
              id(ec_ezo).send_custom("O,SG,1");
            }
            if (id(select_command_ec).state == "Sortie Valeurs - TDS") {
              id(ec_ezo).send_custom("O,EC,0");
              id(ec_ezo).send_custom("O,TDS,1");
              id(ec_ezo).send_custom("O,S,0");
              id(ec_ezo).send_custom("O,SG,0");
            }
            if (id(select_command_ec).state == "Ctrl Calibration") {
              id(ec_ezo).get_calibration();
            }  
            if (id(select_command_ec).state == "Calibration @ sec") {
              id(ec_ezo).send_custom("Cal,dry");
            }
            if (id(select_command_ec).state == "Calibration @ basse = 12880") {
              id(ec_ezo).send_custom("Cal,low,12880");
            }
            if (id(select_command_ec).state == "Calibration @ haute = 80000") {
              id(ec_ezo).send_custom("Cal,high,80000");
            }
            if (id(select_command_ec).state == "Effacer calibration") {
              id(ec_ezo).clear_calibration();
            }

  # Lecture des données du capteur ORP
  - platform: template
    name: "ORP - Lire"  # Nom du bouton.
    id: read_orp  # Identifiant unique.
    icon: mdi:read  # Icône affichée dans Home Assistant.
    entity_category: "Config"  # Catégorie de configuration.
    on_press:
      then:
        - lambda: |-
            byte error;
            id(orp_ezo).send_custom("R");  // Commande pour lire les données ORP.
            error = Wire.endTransmission();
            if (error == 0) {
              id(orp_ezo).send_custom("R");  // Envoie la commande de lecture.
            } else {
              ESP_LOGW("custom_orp_read", "Pas de capteur ORP à cette adresse: ${addORP}!");

  # Envoi de la commande sélectionnée au capteur ORP
  - platform: template
    name: "ORP - Commande sélectionnée envoyée"  # Nom du bouton.
    id: send_selected_orp  # Identifiant unique.
    entity_category: "Config"  # Catégorie de configuration.
    on_press:
      then:
        - lambda: |-
            if (id(select_command_orp).state == "Lire") {
              id(orp_ezo).send_custom("R");
            }
            if (id(select_command_orp).state == "Information") {
              id(orp_ezo).get_device_information();
            }
            if (id(select_command_orp).state == "Status") {
              id(orp_ezo).send_custom("Status");
            }
            if (id(select_command_orp).state == "Vérifier Calibration") {
              id(orp_ezo).get_calibration();
            }
            if (id(select_command_orp).state == "Calibration @ 225 mV") {
              id(orp_ezo).send_custom("Cal,225");
            }
            if (id(select_command_orp).state == "Effacer Calibration") {
              id(orp_ezo).clear_calibration();
            }
  - platform: template
    id: update_firmware
    name: Update aquamonitgpt Firmware - Released (Experimental - ESP32)
    entity_category: "config"
    icon: mdi:update
    on_press: 
      then:
        - ota.http_request.flash:
            md5_url: https://twinsen68.github.io/aquamonitgpt/bin/ota/aquamonitgpt-esp32.ota.md5
            url: https://twinsen68.github.io/aquamonitgpt/bin/ota/aquamonitgpt-esp32.ota.bin


